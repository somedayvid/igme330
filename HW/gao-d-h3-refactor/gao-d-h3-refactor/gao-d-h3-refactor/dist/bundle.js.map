{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://gao-d-h3-refactor/./src/utils.ts","webpack://gao-d-h3-refactor/./src/extra-info.ts","webpack://gao-d-h3-refactor/./src/main.ts"],"sourcesContent":["const capitalizeEachWord = (string: string): string => {\n  const words = string.split(\" \");\n  const capitalizedWords = words.map(capitalizeFirstLetter);\n  return capitalizedWords.join(\" \");\n};\n\nconst capitalizeFirstLetter = (word: string): string => {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n};\n\nconst lowercaseFirstLetter = (string: string): string => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n// Adjusts feedback to user to ensure their search options are configured correctly\nconst hasResults = (results: any[], term: string): boolean => {\n  const searchBy = document.querySelector(\"#search-by\") as HTMLSelectElement | null;\n  const numResultsElement = document.querySelector(\"#num-results\") as HTMLElement | null;\n\n  if (results.length <= 0 && numResultsElement) {\n    if (searchBy?.value === \"level\" && isNaN(Number(term))) {\n      numResultsElement.innerHTML = `Please input a NUMBER between 1 and 60 (inclusive) in order to search by LEVEL or choose DEFINITION in the search by dropdown.`;\n    } else if (searchBy?.value === \"def\" && !isNaN(Number(term))) {\n      numResultsElement.innerHTML = `Please input a WORD in order to search by DEFINITION or choose LEVEL in the search by dropdown.`;\n    } else {\n      numResultsElement.innerHTML = `No results found for \"${term}\"`;\n    }\n    return false;\n  }\n  return true;\n};\n\nexport { capitalizeEachWord, lowercaseFirstLetter, hasResults };\n","// //four remaining functions are all little sections for possible FAQs for each type in Japanese since I got a lot of \n// //questions about what things do during the feedback inclass portion I thought I should maybe explain some things\n// //for people who don't know anything about Japanese\nconst setExtraInfoContent = (content: string) => {\n  const extraInfoElement = document.querySelector(\"#extra-info\") as HTMLElement;\n  if (extraInfoElement) {\n    extraInfoElement.innerHTML = content;\n  }\n};\n\nconst showHomeInfo = () => {\n  setExtraInfoContent(`\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">How does the Japanese Language Work?</h2>\n    <p>In very simplified terms, Japanese has three core written language systems: \n      <a href=\"https://simple.wikipedia.org/wiki/Katakana\" target=\"_blank\" rel=\"noopener\">katakana</a>, \n      <a href=\"https://simple.wikipedia.org/wiki/Hiragana\" target=\"_blank\" rel=\"noopener\">hiragana</a>, and \n      <a href=\"https://simple.wikipedia.org/wiki/Kanji\" target=\"_blank\" rel=\"noopener\">kanji</a>.\n      Hiragana and katakana have phonetic sounds associated with each symbol. Kanji can be represented using hiragana, \n      though it is typically represented with symbols similar to Chinese, where each symbol has a meaning.\n    </p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">What are levels?</h2>\n    <p>The WaniKani site sorts all their radicals, kanji, and vocabulary into levels, separated again into blocks of 10.\n      The site is intended as a learning platform for Japanese writing systems, so the levels are there as a sort of \n      indicator of the user's progress. As such, WaniKani's beginning level is labeled as \"Pleasant\"; the middle levels \n      are \"Painful\", \"Death\", and \"Hell\"; and the final levels are described as \"Paradise\" and \"Reality\". As levels \n      increase, the radicals, kanji, and vocabulary get less common and more complex.\n    </p>`);\n  \n  const numResultsElement = document.querySelector(\"#num-results\");\n  if (numResultsElement) {\n      numResultsElement.innerHTML = \"\";\n  }\n  const displayElement = document.querySelector(\"#display\");\n  if (displayElement) {\n    displayElement.innerHTML = \"\";\n  }\n\n};\n\nconst explainRadicals = () => {\n  setExtraInfoContent(`\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">What are radicals?</h2>\n    <p>Radicals technically do not have definitions, but kanji are made up of individual radicals, which can provide \n      clues to kanji's definition. Definitions are unique and non-overlapping to aid memorization.\n    </p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">How do they decide what definitions radicals have?</h2>\n    <p>Definitions are often derived from recognizable real-life objects or based on kanji usage, with mnemonics used \n      to aid memory. Example: WaniKani's mnemonic for 食 is \"You put on your hat and go outside to kick something \n      white. It's a big white goose, and you're going to cook and <em>eat</em> it.\"\n    </p>`);\n};\n\n  const explainKanji = () => {\n    setExtraInfoContent(\n    `<h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">What is kanji?</h2>\n    <p>Kanji is Japanese writing system that utilizes Chinese characters to express meaning.</p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">Onyomi?</h2>\n    <p>Each kanji has either one or several onyomi and kunyomi pronunciations associated with it. Onyomi is the reading for the Kanji\n     that is derived from the actual Chinese pronunciations of the character in question. For example in Chinese the character 山 is \n     pronounced like \"sān\" with a emphasis on the a. In Japanese the onyomi is also pronounced and represented in writing as \"san\" or \n     「さん」, though it is not an exact 1:1 match in onyomi and chinese pronunciation for many other kanji.\n    </p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">Kunyomi?</h2>\n    <p>Kunyomi is like the same as onyomi but this time is the original Japanese created reading and pronunciation.\n     山: ya|ma or 「やま」。\n    </p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">When do I use onyomi?</h2>\n    <p>Written down the onyomi and kunyomi readings are not relevant as just the kanji character is used, but when pronounced \n     or read the different readings are important. Onyomi is usually used when the kanji is placed next to another kanji in a \n     sentence or phrase. For instance the vocabulary word: 「三人」is composed of the kanji characters that mean: three + people.\n      As they are both kanji, the kanji for three is pronounced as \"san\" or 「さん」, the same way as in chinese. The kanji for \n      people then is pronounced as \"nin\" or 「にん」. \n    </p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">When do I use kunyomi?</h2>\n    <p>If the kanji is not placed next to other kanji, shown in 「大きい」since 「きい」is not kanji, then the kunyomi pronunciation\n    is used in addition to the other Japanese characters present. Other instances for when the kunyomi is used would be if the \n    kanji character is by itself or if the vocabulary word is a compound word such as 「青葉」young + leaves then the kunyomi \n    pronunciations are used as in あお＋ば.\n    </p>`);\n  }\n  \n  const explainVocabulary = () => {\n    setExtraInfoContent( \n    `<h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">Vocabulary?</h2>        \n    <p>Japanese vocabulary encompasses pretty much all all the words that you would say in Japanese. From verbs to adverbs, nouns,\n        pronouns, adjectives, etc. Try out some \"to\" verbs, like \"to die\", \"to fall down\" or other common phrases like \"lack of \n        filial piety. (Check out one of the definitions for \"national treasure)\". \n    </p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">Kana</h2>\n    <p>Kana is just the pronunciation of the vocabulary visualized in <a href=\"https://en.wikipedia.org/wiki/Hiragana\" target=\"_blank\" rel=\"noopener\">hiragana</a>.</p>\n    <h2 class=\"is-size-4 pt-3 has-text-weight-semibold\">Kanji?</h2>\n    <p>Kanji are the symbolic characters taken from Chinese scripture which contain meaning. Kanji will often be paired up with \n      simpler looking characters such as: え、て、る、し、etc, which are hiragana. These hiragana attached to the end of the kanji\n      alters the meaning of the kanji slightly. For instance 「泳」has a kanji definition of \"swim\". If a 「ぐ」is attached to the \n      end of the kanji to become 「泳ぐ」, the definition then becomes \"to swim\" which is also a verb.\n    </p>`);\n  }\n\n\nexport { showHomeInfo, explainRadicals, explainKanji, explainVocabulary };\n","import * as utils from './utils';\nimport * as info from './extra-info';\n\n// Define types for arrays\ninterface WaniKaniData {\n  data: {\n    level: number;\n    meanings: Array<{ meaning: string }>;\n    readings?: Array<{ type: string; reading: string }>;\n    characters: string;\n  };\n}\n\nlet mainKanjiArray: WaniKaniData[] = [];\nlet mainVocabArray: WaniKaniData[] = [];\nlet mainRadicalsArray: WaniKaniData[] = [];\nlet term: string = \"\";\nlet timesToLoop: number = 0;\n\nconst requestHeaders = new Headers({\n  Authorization: 'Bearer ' + '89abe689-ce3d-4035-acfd-65d442782f72',\n});\n\n// Local storage variables\nconst prefix = \"dg8516-\";\nconst searchTermKey = prefix + \"term\";\nconst wordTypeKey = prefix + \"type\";\nconst searchByKey = prefix + \"searchBy\";\n\nconst storedTerm = localStorage.getItem(searchTermKey);\nconst storedType = localStorage.getItem(wordTypeKey);\nconst storedSearchBy = localStorage.getItem(searchByKey);\n\nwindow.onload = () => {\n  const searchWindow = document.querySelector(\"#search-term\") as HTMLInputElement;\n  const typeSelector = document.querySelector(\"#type\") as HTMLSelectElement;\n  const searchBySelector = document.querySelector(\"#search-by\") as HTMLSelectElement;\n\n  // Attach event listeners\n  document.querySelector(\"#search\")!.addEventListener(\"click\", searchButtonClicked);\n\n  info.showHomeInfo();\n  document.querySelector(\"#title\")!.addEventListener(\"click\", info.showHomeInfo);\n  searchWindow.addEventListener(\"change\", storeAll);\n  typeSelector.addEventListener(\"change\", storeAll);\n  searchBySelector.addEventListener(\"change\", storeAll);\n  typeSelector.addEventListener(\"change\", displayExplanation);\n\n  // Set stored values if present\n  searchWindow.value = storedTerm || \"summer\";\n  typeSelector.value = storedType || \"\";\n  searchBySelector.value = storedSearchBy || \"\";\n\n  // Fetch all kanji, vocabulary, and radical data\n  getAllWords(\"radical\", 'https://api.wanikani.com/v2/subjects?types=radical');\n  getAllWords(\"kanji\", 'https://api.wanikani.com/v2/subjects?types=kanji');\n  getAllWords(\"vocabulary\", 'https://api.wanikani.com/v2/subjects?types=vocabulary');\n};\n\n// Store all locally stored values\nconst storeAll = (): void => {\n  localStorage.setItem(searchTermKey, (document.querySelector(\"#search-term\") as HTMLInputElement).value);\n  localStorage.setItem(wordTypeKey, (document.querySelector(\"#type\") as HTMLSelectElement).value);\n  localStorage.setItem(searchByKey, (document.querySelector(\"#search-by\") as HTMLSelectElement).value);\n}\n\n// Handle search button click\nconst searchButtonClicked = (): void => {\n  const searchType = (document.querySelector(\"#type\") as HTMLSelectElement).value;\n  const searchBy = (document.querySelector(\"#search-by\") as HTMLSelectElement).value;\n  const resultsInfo = document.querySelector(\"#num-results\") as HTMLElement;\n  term = (document.querySelector(\"#search-term\") as HTMLInputElement).value.trim();\n\n  document.querySelector(\"#display\")!.innerHTML = \"\";\n\n  if (term === \"\") {\n    resultsInfo.innerHTML = searchBy === \"level\" \n      ? `Please input a number between 1 and 60 (inclusive)!` \n      : `Please input a word into the search bar!`;\n  } else {\n    resultsInfo.innerHTML = `Searching for ${searchBy === \"def\" ? \"definitions\" : \"words\"} that match \"${term}\"`;\n\n    if (searchBy === \"def\") {\n      accessByDef(searchType, getArrayForType(searchType));\n    } else if (searchBy === \"level\") {\n      accessByLevel(searchType, getArrayForType(searchType));\n    }\n  }\n}\n\n// Get all kanji, vocab, or radical data\nconst getAllWords = (type: string, initialLink: string): void => {\n  fetch(new Request(initialLink, { method: 'GET', headers: requestHeaders }))\n    .then(response => response.json())\n    .then(responseBody => {\n      const tempArray = responseBody.data;\n      if (responseBody.pages.next_url) {\n        repeatingGetWords(tempArray, type, responseBody.pages.next_url);\n      } else {\n        mainRadicalsArray = tempArray;\n      }\n    });\n}\n\n// Recursively fetch the remaining pages\nconst repeatingGetWords = (tempArray: WaniKaniData[], type: string, nextURL: string): void => {\n  fetch(new Request(nextURL, { method: 'GET', headers: requestHeaders }))\n    .then(response => response.json())\n    .then(responseBody => { \n      const updatedArray = tempArray.concat(responseBody.data);\n      if (responseBody.pages.next_url) {\n        repeatingGetWords(updatedArray, type, responseBody.pages.next_url);\n      } else {\n        assignArray(type, updatedArray);\n      }\n    });\n}\n\n// Assigns fetched data to the appropriate array\nconst assignArray = (type: string, array: WaniKaniData[]): void => {\n  switch(type) {\n    case \"kanji\": mainKanjiArray = array; break;\n    case \"vocabulary\": mainVocabArray = array; break;\n    case \"radical\": mainRadicalsArray = array; break;\n  }\n}\n\n// Access and display results based on level\nconst accessByLevel = (type: string, array: WaniKaniData[]): void => {\n  const results = array.filter(item => item.data.level === parseInt(term));\n  if (utils.hasResults(results, term)) {\n    document.querySelector(\"#num-results\")!.innerHTML = `<p>${results.length} result(s) for level ${term} ${type}</p>`;\n    document.querySelector(\"#display\")!.innerHTML = getReadings(type, results);\n  }\n}\n\n// Access and display results based on definition\nconst accessByDef = (type: string, array: WaniKaniData[]): void => {\n  const results = array.filter(item =>\n    item.data.meanings.some(meaning => meaning.meaning === utils.capitalizeEachWord(term))\n  );\n  if (utils.hasResults(results, term)) {\n    document.querySelector(\"#num-results\")!.innerHTML = `<p>${results.length} result(s) for \"${term}\"</p>`;\n    document.querySelector(\"#display\")!.innerHTML = getReadings(type, results);\n  }\n}\n\n// Return array by type\nconst getArrayForType = (type: string): WaniKaniData[] => {\n  switch(type) {\n    case \"kanji\": return mainKanjiArray;\n    case \"vocabulary\": return mainVocabArray;\n    case \"radical\": return mainRadicalsArray;\n    default: return [];\n  }\n}\n\n// Format readings for display\nconst getReadings = (type: string, results: WaniKaniData[]): string => {\n  return results.map(result => displayResultsAsString(type, result)).join('');\n}\n\n// Create result string based on type\nconst displayResultsAsString = (type: string, result: WaniKaniData): string => {\n  switch(type) {\n    case \"radical\":\n      return `<div class=\"box is-rounded has-background-danger-light has-text-centered\">\n        <p id=\"identifier\">Identifier: ${result.data.meanings[0].meaning}</p>\n        <p id=\"character\">Character: ${result.data.characters}</p>\n        <p id=\"level\">Level: ${result.data.level}</p>\n      </div>`;\n    case \"kanji\":\n      const onyomi = formatReadings(result.data.readings || [], \"onyomi\");\n      const kunyomi = formatReadings(result.data.readings || [], \"kunyomi\");\n      return `<div class=\"box is-rounded has-background-danger-light has-text-centered\">\n        <p id=\"meanings\">Meanings: ${getMeanings(result)}</p>\n        <p id=\"onyomi\">Onyomi: ${onyomi || \"None\"}</p>\n        <p id=\"kunyomi\">Kunyomi: ${kunyomi || \"None\"}</p>\n        <p id=\"slug\">Kanji: ${result.data.characters}</p>\n        <p id=\"level\">Level: ${result.data.level}</p>\n      </div>`;\n    case \"vocabulary\":\n      return `<div class=\"box is-rounded has-background-danger-light has-text-centered\">\n        <p id=\"meanings\">Meanings: ${getMeanings(result)}</p>\n        <p id=\"readings\">Kana: ${result.data.readings![0].reading}</p>\n        <p id=\"slug\">Kanji: ${result.data.characters}</p>\n        <p id=\"level\">Level: ${result.data.level}</p>\n      </div>`;\n  }\n  return \"\";\n}\n\n// Helper function to get meanings\nconst getMeanings = (result: WaniKaniData): string => {\n  return result.data.meanings.map(m => m.meaning).join(\", \");\n}\n\n// Helper function to format readings by type\nconst formatReadings = (readings: Array<{ type: string; reading: string }>, type: string): string => {\n  return readings.filter(r => r.type === type).map(r => r.reading).join(\", \");\n}\n\nconst displayExplanation = () => {\n  const typeSelector = document.querySelector(\"#type\") as HTMLSelectElement;\n  switch(typeSelector.value) {\n    case \"radical\":\n      info.explainRadicals();\n      break;\n    case \"kanji\":\n      info.explainKanji();\n      break;\n    case \"vocabulary\":\n      info.explainVocabulary();\n      break;\n  }\n}"],"names":["capitalizeFirstLetter","word","charAt","toUpperCase","slice","hasResults","results","term","searchBy","document","querySelector","numResultsElement","length","value","isNaN","Number","innerHTML","setExtraInfoContent","content","extraInfoElement","showHomeInfo","displayElement","mainKanjiArray","mainVocabArray","mainRadicalsArray","requestHeaders","Headers","Authorization","prefix","searchTermKey","wordTypeKey","searchByKey","storedTerm","localStorage","getItem","storedType","storedSearchBy","window","onload","searchWindow","typeSelector","searchBySelector","addEventListener","searchButtonClicked","storeAll","displayExplanation","getAllWords","setItem","searchType","resultsInfo","trim","accessByDef","getArrayForType","accessByLevel","type","initialLink","fetch","Request","method","headers","then","response","json","responseBody","tempArray","data","pages","next_url","repeatingGetWords","nextURL","updatedArray","concat","assignArray","array","filter","item","level","parseInt","getReadings","meanings","some","meaning","split","map","join","result","displayResultsAsString","characters","onyomi","formatReadings","readings","kunyomi","getMeanings","reading","m","r"],"sourceRoot":""}